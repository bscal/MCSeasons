plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'net.ltgt.errorprone' version '2.0.2'
}

dependencies {
    modApi(include("org.spongepowered:configurate-core:4.1.2"))
    modApi(include("org.spongepowered:configurate-hocon:4.1.2"))
    modApi(include("io.leangen.geantyref:geantyref:1.3.13"))
    include 'com.typesafe:config:1.4.2'
}

java {
    archivesBaseName = project.archives_base_name
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

def moduleDependencies(project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
    project.dependencies {
        deps.each {
            api it
        }
    }
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: "fabric-loom"
    apply plugin: "net.ltgt.errorprone"


    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.orgc/current/userguide/declaring_repositories.html
        // for more information about repositories.
        mavenCentral()
    }

    dependencies {
        // To change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
        errorprone("com.google.errorprone:error_prone_core:${rootProject.errorproneVersion}")
    }

    processResources {
        inputs.property "version", project.version
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    def targetJavaVersion = 17
    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            it.options.release = targetJavaVersion
        }

        // set true to enable errorprone
        options.errorprone.enabled = true
        options.errorprone.excludedPaths = ".*/FastNoiseLite.*"
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
        withSourcesJar()
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    // configure the maven publication
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
            }
        }
    }
}